def export_to_obj_file3D(polys, fname=None, scale=1, single_mesh=True, uv_map=False, name="poly"):
    """ exports 3D mesh result to obj file format """

    try:
        dist = polys["dist"]
        points = polys["points"]
        rays_vertices = polys["rays_vertices"]
        rays_faces = polys["rays_faces"]
    except KeyError as e:
        print(e)
        raise ValueError("polys should be a dict with keys 'dist', 'points', 'rays_vertices', 'rays_faces'  (such as generated by StarDist3D.predict_instances) ")

    coord = dist_to_coord3D(dist, points, rays_vertices)

    if not all((coord.ndim==3, coord.shape[-1]==3, rays_faces.shape[-1]==3)):
        raise ValueError(f"Wrong shapes! coord -> (m,n,3) rays_faces -> (k,3)")

    if np.isscalar(scale):
        scale = (scale,)*3

    scale = np.asarray(scale)
    assert len(scale)==3

    coord *= scale

    obj_str = ""
    vert_count = 0

    decimals = int(max(1,1-np.log10(np.min(scale))))


    scaled_verts = scale*rays_vertices
    scaled_verts /= np.linalg.norm(scaled_verts,axis = 1, keepdims=True)


    vertex_line = f"v {{x:.{decimals}f}} {{y:.{decimals}f}} {{z:.{decimals}f}}\n"

    rays_faces = rays_faces.copy()+1

    for i, xs in enumerate(tqdm(coord)):
        # reorder to xyz
        xs = xs[:,[2,1,0]]

        # print(xs)

        # new object
        if i==0 or not single_mesh:
            obj_str += f"o {name}_{i:d}\n"

        # vertex coords
        for x,y,z in xs:
            obj_str += vertex_line.format(x=x,y=y,z=z)

        if uv_map:
            # UV coords
            for vz,vy,vx in scaled_verts:
                u = 1-(.5 + .5*np.arctan2(vz,vx)/np.pi)
                v = 1-(.5 - np.arcsin(vy)/np.pi)
                obj_str +=  f"vt {u:.4f} {v:.4f}\n"

        # face indices
        for face in rays_faces:
            obj_str += f"f {face[0]}/{face[0]} {face[1]}/{face[1]} {face[2]}/{face[2]}\n"

        rays_faces += len(xs)

    if fname is not None:
        with open(fname,"w") as f:
            f.write(obj_str)

    return obj_str